INTRO TO JSX
	a syntax extension for JS. looks a lot like HTML
		const h1 = <h1>Hello world</h1>;

	needs to be compiled in order to translate any JSX into regular JS
	the basic unit of JSX is an element
	JSX elements are treated as JS expressions, meaning they can go anywhere JS expressions can go
		const navBar = <nav>I am a nav bar</nav>;
		const myTeam = {
			center: <li>A</li,
			forward: <li>B</li>,
			defense: <li>C</li>
		};

	JSX elements can have attributes, just like HTML elements can
	written as name="value"
		<a href="http://www.example.com">Welcome to the Web</a>;
		const title = <h1 id="title">Introduction to React.js: Part I</h1>;

	JSX can be nested like in HTML
	if a JSX expression takes up more than one line, then it must be wrapped in parentheses
	a JSX expression must have exactly ONE outermost element
		const example = (
			<a href="https://www.example.com">
				<h1>
					Click me!
				</h1>
			</a>
		);

	DOM
		Document Object Model
		an abstraction of the structured text
		elements of HTML become nodes in the DOM
		'document' is an abstraction of the root node

	ReactDOM.render(arg1, arg2)
		ReactDOM is a JS library that contains several React-specific methods, all of which deal with the DOM in one way or another
		.render() is the most common way to render JSX
		'arg1' is the JSX expression being passed in to be rendered on the screen
			can be literal JSX code or a variable that evaluated to JSX
		'arg2' is where the first element is going to be appended.
			basically looks on the DOM and finds whatever you're specifying and adds the JSX in arg1 there

		ReactDOM.render(<h1>Render me!</h1>, document.getElementById('app'));

		const toDoList = (
			<ol>
				<li>Learn React</li>
				<li>Become a Developer</li>
			</ol>
		);
		ReactDOM.render(toDoList, document.getElementById('app'));

		ONLY UPDATES DOM ELEMENTS THAT HAVE CHANGED
			uses the Virtual DOM to accomplish this
				in React, for every DOM object, there's a corresponding virtual DOM object
				a virtual DOM object is a representation of a DOM object
				basically a copy that doesn't have the ability to print on the screen
			accomplishes this by updating the virtual DOM with the newly rendered JSX elements, then diffing it with the previous virtual DOM to see which objects changed. then React goes into the real DOM and only updates the elements that changed

			1. entire virtual DOM gets updated
			2. virtual DOM diffs itself with previous virtual DOM and React figures out what changed
			3. the changed objects get updated on the real DOM
			4. changes on the real DOm cause the screen to change


ADVANCED JSX
	class vs className
		in HTML
			<div class="big">TEXT</div>
		in JSX
			<div className="big">TEXT</div>
		this is bc in js, class is a reserved word

	self-closing tags
		all self-closing tags must end with a slash
		<br />

	JS within JSX
		in order to write JS code within a JSX element. need to wrap it in curly braces
		import React from 'react';
		import ReactDOM from 'react-dom';
		const math = <h1>2 + 3 = {2 + 3}</h1>;
		ReactDOM.render(math, document.getElementById('app'));

	variables in JSX
		can access variables while inside of a JSX expression by using curly braces
		const name = 'ricky';
		const greeting = <p>Hello, {name}!</p>;

	variable attributes in JSX
		can set attributes within the JSX code using JS variables or object properties
		const sideLength = "200px";
		const panda = (
			<img
				src="images/panda.jpg"
				alt="panda"
				height={sideLength}
				width={sideLength} />
		);
		const pics = {
			panda: "http://bit.ly/1Tqltv5",
			owl: "http://bit.ly/1XGtkM3",
			owlCat: "http://bit.ly/1Upbczi"
		};
		const panda = (
			<img
				src={pics.panda}
				alt="Lazy Panda" />
		);
		const owl = (
			<img
				src={pics.owl}
				alt="Unimpressed Owl" />
		);
		const owlCat = (
			<img
				src={pics.owlCat}
				alt="Ghastly Abomination" />
		);

	event listeners
		can create an event listener by giving a JSX element a special attribute, where the attribute's name should be the word 'on' plus the type of event that you're listening to
		this has a list of valid event names
			https://reactjs.org/docs/events.html#supported-events
		the value should be a function
		function myFunc() {
			alert('Make myFunc the pFunc... omg that was horrible i am so sorry');
		}
		<img onClick={myFunc} />

	conditionals
		if statements don't work within jsx

		ways to solve this:
			1. write the if statements outside the jsx and depending on the truthy values, the variable will be set to differing JSX
			2. use the ternary operator within the JSX
					const headline = (
						<h1>
							{ age >= drinkingAge ? 'Buy Drink' : 'Do Teen Stuff' }
						</h1>
					);
					const img = <img src={pics[coinToss() === 'heads' ? 'kitty' : 'doggy']} />;
			3. && - the && works best in conditionals that will sometimes do an action, but other times do nothing at all
					const tasty = (
						<ul>
							<li>Applesauce</li> // always runs
							{ !baby && <li>Pizza</li> } // runs if not a baby
							{ age > 15 && <li>Brussels Sprouts</li> } // runs if over 15
							{ age > 20 && <li>Oysters</li> }
							{ age > 25 && <li>Grappa</li> }
						</ul>
					);

	.map()
		must be called on an array
		iterates through the array and returns an array on the chanegd values
		used often with jsx

		const strings = ['Home', 'Shop', 'About Me'];
		const listItems = strings.map(string => <li>{string}</li>);
		<ul>{listItems}</ul>

	keys
		lists sometimes need to include keys
		key='value'
			'value' must be unique
			added within <li>
		need to be added if:
			1. the list-items have memory from one render to the next. For instance, when a to-do list renders, each item must "remember" whether it was checked off
			2. a list's order might be shuffled. for instance, a list of searched results might be shuffled from one render to the next

		const people = ['Rowe', 'Prevost', 'Gare'];
		const peopleLis = people.map((person, i) =>
			// expression goes here:
			<li key={'person_' + i}>{person}</li>
		);
		// ReactDOM.render goes here:
		ReactDOM.render(<ul>{peopleLis}</ul>, document.getElementById("app"));

	React.createElement
		the actual code that JSX is compiled into

		const h1 = <h1>Hello world</h1>;
		BECOMES
		const h1 = React.createElement(
			"h1",
			null,
			"Hello, world"
		);


INTRO TO COMPONENTS
	component is a small, reusable chunck of code that is responible for one job, which often involves rendering HTML

	import React from 'react';
	import ReactDOM from 'react-dom';
	class MyComponentClass extends React.Component {
		render() {
			return <h1>Hello world</h1>;
		}
	};
	ReactDOM.render(<MyComponentClass />, document.getElementById('app'));

	import React from 'react';
		the React Library
		creates a new variable named 'React', which is an imported JS object
		needed for JSX, and many other methods

	import ReactDOM from 'react-dom';
		imports methods used to interact with the DOM
		ReactDOM.render() needs this

	create a component class
		every component must come from a component class
		a component class is like a factory that creates components
			if you have a component class, then you can use that class to produce as many components as you want
		in order to make a component class, must use a base class from the React library: React.Component

		React.Component
			in order to create own class, you must subclass React.Component

			class ComponentName extends React.Component {};

	render()
		all components must have a render method
		the render method must contain a return statement

	<MyComponentClass />
		to make a react component, you write a JSX element with the same name as your component


COMPONENTS AND ADVANCED JSX
	multiline jsx
		if the jsx being returned in the render() { return ; } statement, it must be wrapped in parenthesis

	variable attribute in a component
		one way to do it:
			const owl = {
				title: 'Excellent Owl',
				src: 'https://s3.amazonaws.com/codecademy-content/courses/React/react_photo-owl.jpg'
			};
			// Component class starts here:
			class Owl extends React.Component {
				render() {
					return (
						<div>
							<h1>{owl.title}</h1>
							<img src={owl.src} alt={owl.title} />
						</div>
					);
				}
			};
			ReactDOM.render(<Owl />, document.getElementById('app'));

	logic in render function
		can place calculations/conditionals within a render function, but should be before the return statement
		class Random extends React.Component {
			render() {
				const n = Math.floor(Math.random() * 10 + 1);
				let n;
				if(true)
						n = Math.floor(Math.random() * 10 + 1);
				else
						n = 0;
				return <h1>The number is {n}!</h1>;
			}
		}

	this
		used often inside body of component class

		class IceCreamGuy extends React.Component {
			get food() {
				return 'ice cream';
			}
			render() {
				return <h1>I like {this.food}.</h1>;
			}
		}

	event listener
		define event handlers as methods on a component class
		class MyClass extends React.Component {
			myFunc() {
				alert('Stop it.  Stop hovering.');
			}
			render() {
				return (
					<div onHover={this.myFunc}>
					</div>
				);
			}
		}


COMPONENTS RENDER OTHER COMPONENTS
	component in a render function
		within a render method, you can also return component instances, which is simply an instance of another component class
		class OMG extends React.Component {
			render() {
				return <h1>Whooaa!</h1>;
			}
		}
		class Crazy extends React.Component {
			render() {
				return <OMG />;
			}
		}

	importing components
		imports the component class ComponentName so that you can use it
		import { ComponentName } from './ComponentName';

	using import
		just put the component class within the new component class
			<ComponentName />

		import React from 'react';
		import ReactDOM from 'react-dom';
		import {NavBar} from './NavBar';
		class ProfilePage extends React.Component {
			render() {
				return (
					<div>
						<NavBar />
						<h1>All About Me!</h1>
						<p>I like movies and blah blah blah blah blah</p>
						<img src="https://s3.amazonaws.com/codecademy-content/courses/React/react_photo-monkeyselfie.jpg" />
					</div>
				);
			}
		}

	exports
		need to export components in order to be able to be used within other components
		use named exports, meaning you put 'export' before something you want to export
		// Manifestos.js:
		export const faveManifestos = {
			futurist: 'http://www.artype.de/Sammlung/pdf/russolo_noise.pdf',
			SCUM:     'http://www.ccs.neu.edu/home/shivers/rants/scum.html',
			cyborg:   'http://faculty.georgetown.edu/irvinem/theory/Haraway-CyborgManifesto-1.pdf'
		};
		export const alsoRan = 'TimeCube';

		in order to import it, must use curly braces
		// App.js:
		// Import faveManifestos and alsoRan from ./Manifestos.js:
		import { faveManifestos, alsoRan } from './Manifestos';
		// Use faveManifestos:
		console.log(`A Cyborg Manifesto:  ${faveManifestos.cyborg}`);


this.props
	def
		props are the information that gets passed from one component to another

	accessing a component's props
		access it by using 'this.props'

	passing props to a component
		can pass info to a component by giving it an attribute
		passing a string:
			<MyComponent foo='bar' />
		passing other things:
			wrap it in curly braces
			<MyComponent myInfo={["top", "secret"]} />

	render a component's props
		render by using this.props.name-of-info
		this.props.foo

		class Greeting extends React.Component {
			render() {
				return <h1>Hi there, {this.props.firstName}</h1>;
			}
		}
		ReactDOM.render(<Greeting firstName='Grob' />, document.getElementById('app'));

	passing props from component to component
		similar to above, but instead of adding the prop in ReactDOM.render(), add it when you're using it in another component
		import {Greeting} from './Greeting';
		class App extends React.Component {
			render() {
				return (
					<div>
						<h1>
							Hullo and, "Welcome to The Newzz," "On Line!"
						</h1>
						<Greeting name='ricky'/>
						<article>
							Latest newzz:  where is my phone?
						</article>
					</div>
				);
			}
		}
		ReactDOM.render(<App />, document.getElementById('app'));

	props used for conditionals
		props don't need to be rendered, but instead can be used to make decisions within conditionals
		export class Welcome extends React.Component {
			render() {
				if (this.props.name == 'Wolfgang Amadeus Mozart') {
					return (
						<h2>
							hello sir it is truly great to meet you here on the web
						</h2>
					);
				} else {
					return (
						<h2>
							WELCOME "2" MY WEB SITE BABYYY!!!!!
						</h2>
					);
				}
			}
		}

	event handler in component class
		in order to pass an event handler function as a prop, you first need to define an event handler
		define an event handler as a method on the component class, just like the render method

		class Example extends React.Component {
			handleEvent() {
				alert(`I am an event handler.
					If you see this message,
					then I have been called.`);
			}
			render() {
				return (
					<h1 onClick={this.handleEvent}>
						Hello world
					</h1>
				);
			}
		}

	pass event handler as a prop
		same way you'd pass in any other info
		class Talker extends React.Component {
			handleClick() {
				let speech = '';
					for (let i = 0; i < 10000; i++) {
						speech += 'blah ';
					}
				alert(speech);
			}
			render() {
				return <Button onClick={this.handleClick} />;
			}
		}

	recieve event handler as a prop
		need to attatch the prop as an event handler
		done by giving that JSX element a special attribute
		export class Button extends React.Component {
			render() {
				return (
					<button onClick={this.props.onClick}>
						Click me!
					</button>
				);
			}
		}

	naming convention
		can technically be anything, but convention says this:
			first think of what type of event you're listening for
				ex: listening for a "click"
			name of event handler
				should be "handle" + your event type
					ex "handleClick"
			name of prop used to pass the event handler
				should be "on" + your event type
					ex: "onClick"

	this.props.children
		returns everything in between a component's opening and closing JSX tags
		component's don't have to be self closing tags
			<ComponentClass />
			===
			<ComponentClass> </ComponentClass>
		this.props.children returns whatever is between the opening and closing tags

	defaultProps
		if a component is expecting a prop, but doesn't receive one, will be blank
		can change this by setting default props
		defaultProps should be set to an object

		class Example extends React.Component {
			render() {
				return <h1>{this.props.text}</h1>;
			}
		}
		Example.defaultProps = { text: 'yo' };


this.state
	setting initial state
		should be declared inside of a constructor method
		this.state should be equal to an object
		must always call super within constructor

		class Example extends React.Component {
			constructor(props) {
				super(props);
				this.state = { mood: 'decent', hungry: false };
			}
			render() {
				return <div></div>;
			}
		}
		<Example />

	access a component's state
		to read a component's state, use the expression this.state.name-of-property
		{this.state.mood}

	updating state
		must use this.setState()
			takes two args
				arg1 - an object that will update the component's state
				arg2 - a callback
					arg2 is almost never needed
		this.setState({ hungry: true });

	wrapping this.setState()
		most common way to call this.setState is to call a custom function that wraps a this.setState() call

		class Example extends React.Component {
			constructor(props) {
				super(props);
				this.state = { weather: 'sunny' };
				this.makeSomeFog = this.makeSomeFog.bind(this);
			}
			makeSomeFog() {
				this.setState({
					weather: 'foggy'
				});
			}
		}

		this.makeSomeFog = this.makeSomeFog.bind(this);
			necessary bc nameSomeFog()'s body contains the word 'this'

	this.setState()
		whenever this is called, it automatically calls .render() as soon as the state has changed
		therefore, you can't call this.setState from within .render()


STATELESS COMPONENTS FROM STATEFUL COMPONENTS
	stateful
		any component that has a state property
	stateless
		any component that does not have a state property

	a stateful component passes its state down to a stateless component

	// Parent.js
	import React from 'react';
	import ReactDOM from 'react-dom';
	import {Child} from './Child';
	class Parent extends React.Component {
		constructor(props) {
			super(props);
			this.state = { name: 'Frarthur' };
		}
		render() {
			return <Child name={this.state.name} />;
		}
	}
	ReactDOM.render(<Parent />, document.getElementById('app'));

	// Child.js
	import React from 'react';
	export class Child extends React.Component {
		render() {
			return <h1>Hey, my name is {this.props.name}!</h1>;
		}
	}

	props vs state
		props are used to store info that can be changed, but can only be changed by a different component
		state is used to store info that the component itself can change


CHILD COMPONENTS UPDATE THEIR PARENTS' state
	1. the parent component class defines a method that calls this.setState()
	2. the parent component binds the newly-defined method to the current instance of the component in its constructor
			this ensures that when we pass the method to the child component, it will still update the parent component
	3. parent then passes that method down to a child
	4. child receives the passed-down function and uses it as an event handler

	recieving the event handler
		if the function that changes state requires an arg, you needa do a bit more to be able to pass the arg
		the new function should take an event object as an arg, extract the name that you want from that event object, and then call the event handler, passing in the extracted name
		looks like this:
			handleChange(e) {
				const name = e.target.value;
				this.props.onChange(name);
			}
		then must bind 'this' to our new method to the current instance of child
		finally, pass this method to the event handler

	// Parent.js
	import React from 'react';
	import ReactDOM from 'react-dom';
	import { Child } from './Child';
	class Parent extends React.Component {
		constructor(props) {
			super(props);
			this.state = { name: 'Frarthur' };
			this.changeName = this.changeName.bind(this);
		}
		changeName(newName) {
			this.setState({
				name: newName
			});
		}
		render() {
			return <Child name={this.state.name} onChange={this.changeName} />
		}
	}
	ReactDOM.render(<Parent />, document.getElementById('app'));

	// Child.js
	import React from 'react';
	export class Child extends React.Component {
		constructor(props) {
			super(props);
			this.handleChange = this.handleChange.bind(this);
		}
		handleChange(e) {
			const name = e.target.value;
			this.props.onChange(name);
		}
		render() {
			return (
				<div>
					<h1>
						Hey my name is {this.props.name}!
					</h1>
					<select id="great-names" onChange={this.handleChange}>
						<option value="Frarthur">
							Frarthur
						</option>

						<option value="Gromulus">
							Gromulus
						</option>

						<option value="Thinkpiece">
							Thinkpiece
						</option>
					</select>
				</div>
			);
		}
	}


CHILD COMPONENTS UPDATE SIBLING COMPONENTS
	components should only do one thing
	in previous code above, the child would do two: display name and offer a way to change that name
	should split that component to two

	1. stateful component class defines a function that calls this.setState
	2. the stateful component passes that function down to a stateless component
	3. that stateless component class defines a function that calls the passed-down function, and that can take an event object as an arg
	4. the stateless component class uses this new info as an event handler
	5. when an event is detected, the parent's state updates
	6. the stateful component class passes down its state, distinct from the ability to change its state, to a different stateless component
	7. that stateless component class receive the state and displays it
	8. an instance of the stateful component class is rendered. one stateless child component displays the state, and a different stateless child component displays a way to change the state

	// Parent.js
	import React from 'react';
	import ReactDOM from 'react-dom';
	import { Child } from './Child';
	import { Sibling } from './Sibling';
	class Parent extends React.Component {
		constructor(props) {
			super(props);
			this.state = { name: 'Frarthur' };
			this.changeName = this.changeName.bind(this);
		}
		changeName(newName) {
			this.setState({
				name: newName
			});
		}
		render() {
			return (
				<div>
					<Child onChange={this.changeName} />
					<Sibling name={this.state.name} />
				</div>
			);
		}
	});
	ReactDOM.render(<Parent />, document.getElementById('app'));

	// Child.js
	import React from 'react';
	export class Child extends React.Component {
		constructor(props) {
			super(props);
			this.handleChange = this.handleChange.bind(this);
		}
		handleChange(e) {
			const name = e.target.value;
			this.props.onChange(name);
		}
		render() {
			return (
				<div>
					<select
						id="great-names"
						onChange={this.handleChange}>
						<option value="Frarthur">Frarthur</option>
						<option value="Gromulus">Gromulus</option>
						<option value="Thinkpiece">Thinkpiece</option>
					</select>
				</div>
			);
		}
	}

	// Sibling.js
	import React from 'react';
	export class Sibling extends React.Component {
		render() {
			const name = this.props.name;
			return (
				<div>
					<h1>Hey, my name is {name}!</h1>
					<h2>Don't you think {name} is the prettiest name ever?</h2>
					<h2>Sure am glad that my parents picked {name}!</h2>
				</div>
			);
		}
	}


STYLE
	inline styles
		write styles as attributes
		<h1 style={{color: 'red', background: 'lightblue'}}>Hello World</h1>

	style object variable
		create an object to hold the styles
		const style = {
			color: 'darkcyan',
			background: 'mintcream',
			marginTop: '100px',
			fontSize: '50px'
		};

	style value synta
		react assumes you're using px, so you don't need to specify px
		fontSize: 50;
		===
		fontSize: '50px';


CONTAINER COMPONENTS VS PRESENTATIONAL COMPONENTS
	if a component has to have 'state', make calculations based on 'props', or manage any other complex logic, then it shouldn't also have to render JSX
		instead, it should render a component

	presentational component
		only job is to render JSX
	container component
		computes the logic, figures out what to display


STATELESS FUNCTIONAL COMPONENTS
	def: stateless functional component - a component class written as a function
	if a component class only has a render function, can be rewritten as a function

	// Normal way to display a prop:
	export class MyComponentClass extends React.Component {
		render() {
			return <h1>{this.props.title}</h1>;
		}
	}
	// Stateless functional component way to display a prop:
	export const MyComponentClass = (props) => {
		return <h1>{props.title}</h1>;
	}
	// Normal way to display a prop using a variable:
	export class MyComponentClass extends React.component {
		render() {
			let title = this.props.title;
			return <h1>{title}</h1>;
		}
	}
	// Stateless functional component way to display a prop using a variable:
	export const MyComponentClass = (props) => {
		let title = props.title;
		return <h1>{title}</h1>;
	}


PROPTYPES
	useful for two reasons:
		1. prop validation
				ensures that your props are doing what they're supposed to be doing
				if props are missing or if they're not doing what's expected, can log to console
		2. documentation
				allows you to quickly glance at a file and understand the component class

	apply proptypes
		steps to making a propType
			1. search for a property named propTypes. if none is made, make one
					needs to be declared after the close of your component declaration
					value of propTypes is an object
			2. add a property to the propTypes
					for each prop that component class expects to receive, there can only be one property on your propTypes

		export class MessageDisplayer extends React.Component {
			render() {
				return <h1>{this.props.message}</h1>;
			}
		}
		// This propTypes object should have one property for each expected prop:
		MessageDisplayer.propTypes = {
			message: React.PropTypes.string
		};

	properties to propTypes
		the name of each property in propTypes should be the name of the expected prop
		the value should fit this pattern
			React.PropTypes.expected-data-type-goes-here
				i.e. React.PropTypes.string
		if you add .isRequired to a propTypem then you will get a console warning if that prop isn't sent
				i.e. React.PropTypes.object.isRequired

	PropTypes in stateless function components
		pretty much same thing as in component classes??

		const Example = (props) => {
			return <h1>{props.message}</h1>;
		}
		Example.propTypes = {
			message: React.PropTypes.string.isRequired
		};


FORMS
	purpose is to update the server any time a user enters or deletes any character

	export class Input extends React.Component {
		constructor(props){
			super(props);
			this.state = { userInput: '' };
			this.handleUserInput = this.handleUserInput.bind(this);
		}
		handleUserInput(e) {
			this.setState({
				userInput: e.target.value
			});
		}
		render() {
			return (
				<div>
					<input type="text" onChange={this.handleUserInput} value={this.state.userInput} />
					<h1>{this.state.userInput}</h1>
				</div>
			);
		}
	}
	ReactDOM.render(<Input />, document.getElementById('app'));

	uncontrolled component
		a component that maintains its own internal state
	controlled compoennt
		a component that does not maintain any internal state
		has no state, so must be controlled by someone else


MOUNTING LIFECYLE METHODS
	def: lifecycle methods - methods that get called at certain moments in a component's life

	mounting
		a component "mounts" when it renders for the first time
			this is when mounting lifecycle methods get called
		three mounting lifecycle methods
			1. componentWillMount
			2. render
			3. componentDidMount
		when a component mounts, it automatically called these three methods

	componentWillMount
		when a component renders for the first time, componentWillMount gets called right before the render

	render
		belongs to two categories: mounting lifecycle methods and updating lifecycle methods

	componentDidMount
		when a component renders for the first time, componentDidMount gets called right after the render
		a good place to connect a React app to external apps, such as web APIs or JS frameworks


UPDATING/UNMOUNTING LIFECYCLE METHODS
	updating lifecycle methods
		def: a component updates every time that it renders, starting with the second render
		five updating lifecycle methods
			1. componentWillReceiveProps
			2. shouldComponentUpdate
			3. componentWillUpdate
			4. render
			5. componentDidUpdate

	componentWillReceiveProps
		only gets called if the component will receive props
		large use case: comparing imcoming props to current props or state, and deciding what to render based on that comparison
		export class Example extends React.Component {
			componentWillReceiveProps(nextProps) {
				alert("Check out the new props.text that I'm about to get:  " + nextProps.text);
			}
			render() {
				return <h1>{this.props.text}</h1>;
			}
		}
		// The first render won't trigger
		// componentWillReceiveProps:
		ReactDOM.render(<Example text="Hello world" />, document.getElementById('app'));
		// After the first render,
		// subsequent renders will trigger
		// componentWillReceiveProps:
		setTimeout(() => {
			ReactDOM.render(<Example text="Hello world" />, document.getElementById('app'));
		}, 1000);

	shouldComponentUpdate
		get's called after componentWillReceiveProps, but before render
		should return either true or false
			if true, nothing noticible really happens
			if false, then the component will not update
			should only return false under certain circumstances
		receives two args: nextProps and nextState

	componentWillUpdate
		gets called in between shouldComponentUpdate and render
		receives two args: nextProps and nextState
		cannot call this.setState
		main purpise is to interact with things outside the React architecture

	componentDidUpdate
		gets called after any rendered HTML has finished loading
		gets passed two args: prevProps and prevState
			those are references to the props and state before the current updating period began
		typically used to interact with things outside the React environment

	unmounting
		a component's unmounting period occurs when the component is removed from the DOM
		could happen if the DOM is rerendered without the component, or if the user navigates to a different website or closes their web browser

	componentWillUnmount
		only unmounting lifecycle method
		gets called right before the component is removed from the DOM
		if a component initiates any methods that require cleanup, then this is where you should put that cleanup


