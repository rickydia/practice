INTRO TO JSX
	a syntax extension for JS. looks a lot like HTML
		const h1 = <h1>Hello world</h1>;

	needs to be compiled in order to translate any JSX into regular JS
	the basic unit of JSX is an element
	JSX elements are treated as JS expressions, meaning they can go anywhere JS expressions can go
		const navBar = <nav>I am a nav bar</nav>;
		const myTeam = {
			center: <li>A</li,
			forward: <li>B</li>,
			defense: <li>C</li>
		};

	JSX elements can have attributes, just like HTML elements can
	written as name="value"
		<a href="http://www.example.com">Welcome to the Web</a>;
		const title = <h1 id="title">Introduction to React.js: Part I</h1>;

	JSX can be nested like in HTML
	if a JSX expression takes up more than one line, then it must be wrapped in parentheses
	a JSX expression must have exactly ONE outermost element
		const example = (
			<a href="https://www.example.com">
				<h1>
					Click me!
				</h1>
			</a>
		);

	DOM
		Document Object Model
		an abstraction of the structured text
		elements of HTML become nodes in the DOM
		'document' is an abstraction of the root node

	ReactDOM.render(arg1, arg2)
		ReactDOM is a JS library that contains several React-specific methods, all of which deal with the DOM in one way or another
		.render() is the most common way to render JSX
		'arg1' is the JSX expression being passed in to be rendered on the screen
			can be literal JSX code or a variable that evaluated to JSX
		'arg2' is where the first element is going to be appended.
			basically looks on the DOM and finds whatever you're specifying and adds the JSX in arg1 there

		ReactDOM.render(<h1>Render me!</h1>, document.getElementById('app'));

		const toDoList = (
			<ol>
				<li>Learn React</li>
				<li>Become a Developer</li>
			</ol>
		);
		ReactDOM.render(toDoList, document.getElementById('app'));

		ONLY UPDATES DOM ELEMENTS THAT HAVE CHANGED
			uses the Virtual DOM to accomplish this
				in React, for every DOM object, there's a corresponding virtual DOM object
				a virtual DOM object is a representation of a DOM object
				basically a copy that doesn't have the ability to print on the screen
			accomplishes this by updating the virtual DOM with the newly rendered JSX elements, then diffing it with the previous virtual DOM to see which objects changed. then React goes into the real DOM and only updates the elements that changed

			1. entire virtual DOM gets updated
			2. virtual DOM diffs itself with previous virtual DOM and React figures out what changed
			3. the changed objects get updated on the real DOM
			4. changes on the real DOm cause the screen to change


ADVANCED JSX
	class vs className
		in HTML
			<div class="big">TEXT</div>
		in JSX
			<div className="big">TEXT</div>
		this is bc in js, class is a reserved word

	self-closing tags
		all self-closing tags must end with a slash
		<br />

	JS within JSX
		in order to write JS code within a JSX element. need to wrap it in curly braces
		import React from 'react';
		import ReactDOM from 'react-dom';
		const math = <h1>2 + 3 = {2 + 3}</h1>;
		ReactDOM.render(math, document.getElementById('app'));

	variables in JSX
		can access variables while inside of a JSX expression by using curly braces
		const name = 'ricky';
		const greeting = <p>Hello, {name}!</p>;

	variable attributes in JSX
		can set attributes within the JSX code using JS variables or object properties
		const sideLength = "200px";
		const panda = (
			<img
				src="images/panda.jpg"
				alt="panda"
				height={sideLength}
				width={sideLength} />
		);
		const pics = {
			panda: "http://bit.ly/1Tqltv5",
			owl: "http://bit.ly/1XGtkM3",
			owlCat: "http://bit.ly/1Upbczi"
		};
		const panda = (
			<img
				src={pics.panda}
				alt="Lazy Panda" />
		);
		const owl = (
			<img
				src={pics.owl}
				alt="Unimpressed Owl" />
		);
		const owlCat = (
			<img
				src={pics.owlCat}
				alt="Ghastly Abomination" />
		);

	event listeners
		can create an event listener by giving a JSX element a special attribute, where the attribute's name should be the word 'on' plus the type of event that you're listening to
		this has a list of valid event names
			https://reactjs.org/docs/events.html#supported-events
		the value should be a function
		function myFunc() {
			alert('Make myFunc the pFunc... omg that was horrible i am so sorry');
		}
		<img onClick={myFunc} />

	conditionals
		if statements don't work within jsx

		ways to solve this:
			1. write the if statements outside the jsx and depending on the truthy values, the variable will be set to differing JSX
			2. use the ternary operator within the JSX
					const headline = (
						<h1>
							{ age >= drinkingAge ? 'Buy Drink' : 'Do Teen Stuff' }
						</h1>
					);
					const img = <img src={pics[coinToss() === 'heads' ? 'kitty' : 'doggy']} />;
			3. && - the && works best in conditionals that will sometimes do an action, but other times do nothing at all
					const tasty = (
						<ul>
							<li>Applesauce</li> // always runs
							{ !baby && <li>Pizza</li> } // runs if not a baby
							{ age > 15 && <li>Brussels Sprouts</li> } // runs if over 15
							{ age > 20 && <li>Oysters</li> }
							{ age > 25 && <li>Grappa</li> }
						</ul>
					);

	.map()
		must be called on an array
		iterates through the array and returns an array on the chanegd values
		used often with jsx

		const strings = ['Home', 'Shop', 'About Me'];
		const listItems = strings.map(string => <li>{string}</li>);
		<ul>{listItems}</ul>

	keys
		lists sometimes need to include keys
		key='value'
			'value' must be unique
			added within <li>
		need to be added if:
			1. the list-items have memory from one render to the next. For instance, when a to-do list renders, each item must "remember" whether it was checked off
			2. a list's order might be shuffled. for instance, a list of searched results might be shuffled from one render to the next

		const people = ['Rowe', 'Prevost', 'Gare'];
		const peopleLis = people.map((person, i) =>
			// expression goes here:
			<li key={'person_' + i}>{person}</li>
		);
		// ReactDOM.render goes here:
		ReactDOM.render(<ul>{peopleLis}</ul>, document.getElementById("app"));

	React.createElement
		the actual code that JSX is compiled into

		const h1 = <h1>Hello world</h1>;
		BECOMES
		const h1 = React.createElement(
			"h1",
			null,
			"Hello, world"
		);


INTRO TO COMPONENTS
	component is a small, reusable chunck of code that is responible for one job, which often involves rendering HTML

	import React from 'react';
	import ReactDOM from 'react-dom';
		class MyComponentClass extends React.Component {
		render() {
			return <h1>Hello world</h1>;
		}
	};
	ReactDOM.render(<MyComponentClass />, document.getElementById('app'));

	import React from 'react';
		the React Library
		creates a new variable named 'React', which is an imported JS object
		needed for JSX, and many other methods

	import ReactDOM from 'react-dom';
		imports methods used to interact with the DOM
		ReactDOM.render() needs this

	create a component class
		every component must come from a component class
		a component class is like a factory that creates components
			if you have a component class, then you can use that class to produce as many components as you want
		in order to make a component class, must use a base class from the React library: React.Component

		React.Component
			in order to create own class, you must subclass React.Component

			class ComponentName extends React.Component {}

	render()
		all components must have a render method
		the render method must contain a return statement

	<MyComponentClass />
		to make a react component, you write a JSX element with the same name as your component


COMPONENTS AND ADVANCED JSX



