INTRO
	Console
		def: a tool that devs use to record the output of their JS programs
			print?
		console.log() command used to print, or log, text to the console
			console.log("Hello!");

	Data types
		strings
			single or double quotes
		numbers
			ints or doubles; with NO quotes
		bools
			true/false; with NO quotes
		null
			represents the absence of value; with no quotes
		undefined


	Math operators
		add +
		subtract -
		multiply *
		divide /
		+=
		-=
		*=
		x++
		x--

	Properties
		when you introduce a new piece of data into JS, the browser saves it as an instance of the data type
		def: instance - an individual case, or object, of a data type
		.length
			every string instance has a length property
			console.log('Hello'.length);

		def: method - functions for the instance
		.toUpperCase()
			// prints HELLO
			console.log('Hello'.toUpperCase());
		.startsWith()
			// prints true
			console.log('hey'.startsWith('h'));

		def: libraries - use libraries to use methods for instances that aren't necessarily declared

		comments
			// single line
			/* multi line */


VARIABLES
	two ways to declare variables
		let
			value can be reassigned
		const
			value cannot change

	string interpolation
		+ connects the strings being added together
			let pet = 'dog';
			console.log('I love my pet ' + pet);
			// prints 'I love my pet dog'

		${variable} allows you to insert variables directly into text
			// needs to be wrapped in backticks `${variable}`
			let pet = 'dog';
			console.log(`I own a pet ${pet}`);
			// prints 'I own a pet dog


CONTROL FLOW
	if/else statements
		if( ){   }
		else if( ){   }
		else{   }

	switch statements
			very similar to c++
				let groceryItem = 'papaya';
				switch (groceryItem) {
					case 'tomato':
						console.log('Tomatoes are $0.49');
						break;
					case 'lime':
						console.log('Limes are $1.49');
						break;
					case 'papaya':
						console.log('Papayas are $1.29');
						break;
					default:
						console.log('Invalid item');
						break;
				}

	ternary operator
		if(x){
			true;
		}
		else{
			false;
		}

		is the same as

		x ? true : false;

	true/false values
		equates to false
			false, 0, -0, "", '', null, undefined, NaN
		equates to true
			all variable that have been declafed and assigned

	===
		equal
	!==
		not equal
	<
		less than
	>
		greater than
	<=
		less than or equal to
	>=
		greater than or equal to
	!
		negation of truthiness
	&&
		and
	||
		or


FUNCTIONS
	// this type of function layout is known as arrow functions
	const function1 = () => {
		blah
	};
	const function2 = (parameter1, parameter2) => {
		return parameter1 + parameter2;
	};
	function1();
	console.log(function2(input1, input2));

		const function
			creates a variable with a given name
		=
			variable is set equal to a set of parentheses followed by an arrow token
		() =>
			indicates the variable stores a function
		parameter1, parameter2
			parameter inputted to function
			there can be as many parameters as needed
		{ };
			function body
		function1();
			function call
		input1, input2
			the input for function
		return
			returns the thing next to it

	Function Declaration
		a function that is bound to an identifier or name
		require the keyword 'function', a name, and a function body

		function square (number) {
			return number * number;
		}
		console.log(square(5));

	Function Expression
		similar to function declaration, except that identifier can be omitted
		typically stored in a variable

		const square = function (number) {
			return number * number;
		};

	Arrow Functions
		1. Functions that take a single parameter should not use parentheses. The code will still work, but it's better practice to omit the parentheses around single parameters. However, if a function takes zero or multiple parameters, parentheses are required.
		2. A function composed of a sole single-line block is automatically returned. The contents of the block should immediately follow the arrow => and the return keyword can be removed. This is referred to as implicit return.
		3. A function composed of a sole single-line block does not need brackets.

		const multiplyByNineFifths = (celsius) => {
			return celsius * (9/5);
		};
		const getFahrenheit = (celsius) => {
			return multiplyByNineFifths(celsius) + 32;
		};
		console.log('The temperature is ' + getFahrenheit(15) + '°F');

		can get refactored to:

		const multiplyByNineFifths = celsius => celsius * (9/5);
		const getFahrenheit = celsius => multiplyByNineFifths(celsius) + 32;
		console.log('The temperature is ' + getFahrenheit(15) + '°F');




