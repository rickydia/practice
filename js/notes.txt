INTRO
	Console
		def: a tool that devs use to record the output of their JS programs
			print?
		console.log() command used to print, or log, text to the console
			console.log("Hello!");

	Data types
		strings
			single or double quotes
		numbers
			ints or doubles; with NO quotes
		bools
			true/false; with NO quotes
		null
			represents the absence of value; with no quotes
		undefined


	Math operators
		add +
		subtract -
		multiply *
		divide /
		+=
		-=
		*=
		increment x++
		decrement x--

	Properties
		when you introduce a new piece of data into JS, the browser saves it as an instance of the data type
		def: instance - an individual case, or object, of a data type
		.length
			every string instance has a length property
			console.log('Hello'.length);

		def: method - functions for the instance
		.toUpperCase()
			// prints HELLO
			console.log('Hello'.toUpperCase());
		.startsWith()
			// prints true
			console.log('hey'.startsWith('h'));

		def: libraries - use libraries to use methods for instances that aren't necessarily declared

		comments
			// single line
			/* multi line */


VARIABLES
	two ways to declare variables
		let
			value can be reassigned
		const
			value cannot change

	string interpolation
		+ connects the strings being added together
			let pet = 'dog';
			console.log('I love my pet ' + pet);
			// prints 'I love my pet dog'

		${variable} allows you to insert variables directly into text
			// needs to be wrapped in backticks `${variable}`
			let pet = 'dog';
			console.log(`I own a pet ${pet}`);
			// prints 'I own a pet dog


CONTROL FLOW
	if/else statements
		if( ){   }
		else if( ){   }
		else{   }

	switch statements
			very similar to c++
				let groceryItem = 'papaya';
				switch (groceryItem) {
					case 'tomato':
						console.log('Tomatoes are $0.49');
						break;
					case 'lime':
						console.log('Limes are $1.49');
						break;
					case 'papaya':
						console.log('Papayas are $1.29');
						break;
					default:
						console.log('Invalid item');
						break;
				}

	ternary operator
		if(x > y){
			return true;
		}
		else{
			return false;
		}

		is the same as

		return (x > y ? true : false);

	true/false values
		equates to false
			false, 0, -0, "", '', null, undefined, NaN
		equates to true
			all variable that have been declafed and assigned

	===
		equal
	!==
		not equal
	<
		less than
	>
		greater than
	<=
		less than or equal to
	>=
		greater than or equal to
	!
		negation of truthiness
	&&
		and
	||
		or


FUNCTIONS
	every function is in fact a fucntion object

	// this type of function layout is known as arrow functions
	const function1 = () => {
		blah
	};
	const function2 = (parameter1, parameter2) => {
		return parameter1 + parameter2;
	};
	function1();
	console.log(function2(input1, input2));

		const function
			creates a variable with a given name
		=
			variable is set equal to a set of parentheses followed by an arrow token
		() =>
			indicates the variable stores a function
		parameter1, parameter2
			parameter inputted to function
			there can be as many parameters as needed
		{ };
			function body
		function1();
			function call
		input1, input2
			the input for function
		return
			returns the thing next to it

	Function Declaration
		a function that is bound to an identifier or name
		require the keyword 'function', a name, and a function body

		function square (number) {
			return number * number;
		}
		console.log(square(5));

	Function Expression
		similar to function declaration, except that identifier can be omitted
		typically stored in a variable

		const square = function (number) {
			return number * number;
		};

	Arrow Functions
		1. Functions that take a single parameter should not use parentheses. The code will still work, but it's better practice to omit the parentheses around single parameters. However, if a function takes zero or multiple parameters, parentheses are required.
		2. A function composed of a sole single-line block is automatically returned. The contents of the block should immediately follow the arrow => and the return keyword can be removed. This is referred to as implicit return.
		3. A function composed of a sole single-line block does not need brackets.

		const multiplyByNineFifths = (celsius) => {
			return celsius * (9/5);
		};
		const getFahrenheit = (celsius) => {
			return multiplyByNineFifths(celsius) + 32;
		};
		console.log('The temperature is ' + getFahrenheit(15) + '°F');

		can get refactored to:

		const multiplyByNineFifths = celsius => celsius * (9/5);
		const getFahrenheit = celsius => multiplyByNineFifths(celsius) + 32;
		console.log('The temperature is ' + getFahrenheit(15) + '°F');


SCOPE
	Block Scope
		if a variable is redefined within a lesser scope using let, it won't affect the value of that same variable outside of that scope
		const colorOfSky = () => {
			const dusk = true;
			let color = 'blue';
			if (dusk) {
				let color = 'pink';
				console.log(color); // pink
			}
			console.log(color); // blue
		};
		colorOfSky(); // blue
		console.log(color); // ReferenceError


ARRAYS
	arrays declared with const remain mutable
	can change contents of an array, but cannot reassign the variable name to a new array or other data type

	let letters = ['a', 'b', 'c'];
	console.log(letters);   //prints ['a', 'b', 'c']
	console.log(letters[1]);   // prints 'b'

	.length
		tells the length of the array
		letters.length;

	.push
		pushes to the back
		letters.push('d');

	.pop()
		removes item from back
		letters.pop();

	ton of other methods as well


LOOPS
	For Loops
		just like c++
		for(let i = 0; i < var.length; i++){
			blah;
		}

	While Loops
		while(condition){
			blah;
		}

	break is a thing here too


ITERATORS
	.forEach()
		executes the same code on each element of an array
		must be called upon an array
		any changes to the iterated array value won't be updated in the original array
		the return value is undefined

		let numbers = [1, 2, 3];
		numbers.forEach(function(num){
			console.log(num * num);
		});

		(function(num)){
			creates a fucntion that takes a single parameter, num, and opens the block of code for that function. since forEach is an iterator method, every element in nunmbers will be passed to this fucntion as an argument in place of num

		can also be written as:

		let numbers = [1, 2, 3];
		numbers.forEach(num => console.log(num * num));

	.map()
		like forEach, but creates a new array with changed values
		syntax almost identical to forEach, but creates a new array to it must be set equal to something

		let numbers = [1, 2, 3];
		let bigNumbers = numbers.map(function(num){
			return num * num;
		});

		let bigNumbers = numbers.map
			creates a new array in which the returned values of the .map() method will be saved and calls the .map() method on the array numbers
		(function(num){
			creates a function with a single parameter, num, that opens the block of code for that function
		return num * num;
			the code we wish to execute upon each element in the array. this will save each value from the numbers array squared to the bigNumbers array

		can also be written as:

		let numbers = [1, 2, 3];
		let bigNumbers = numbers.map(num => num * num);

	.filter()
		creates a new array based off of certain elements frmot eh original array that evaluate to truthy based on conditions written in the block of the method

		let numbers = [1, 2, 10];
		let bigNumbers = numbers.filter(function(num){
			return num > 5;
		});

		can also be rewritten as:

		let numbers = [1, 2, 10];
		let bigNumbers = numbers.filter(num => num > 5);


OBJECTS
	def: containers that can store data and functions

	let restaurant = {
		_name: 'Italian Bistro',
		_seatingCapacity: 120,
		_hasDineInSpecial: true,
		_entrees: ['Penne alla Bolognese', 'Chicken Cacciatore', 'Linguine Pesto'],
		// function style 1 within object
		openRestaurant: () => {
			if (this._hasDineInSpecial) {
				return 'Unlock the door, post the special on the board, then flip the open sign.';
			}
			else {
				return 'Unlock the door, then flip the open sign.';
			}
		},
		// function style 2 within object
		closeRestaurant() {
			return 'Lock the door, flip the open sign. We are closed.';
		},
		// function style 3 within object
		doNothing: function(){
			return null;
		},
		set seatingCapacity(newCapacity) {
			if (typeof newCapacity === 'number') {
				this._seatingCapacity = newCapacity;
				console.log(`${newCapacity} is valid input.`);
			}
			else {
				console.log(`Change ${newCapacity} to a number.`)
			}
		}
		get seatingCapacity() {
			console.log(`There are ${this._seatingCapacity} seats at Italian Bistro.`);
			return this._seatingCapacity;
		}
	};
	console.log(restaurant._entrees);
	console.log(restaurant['_entrees']);
	let food = '_entrees';
	console.log(restaurant[food]);
	console.log(restaurant.openRestaurant());
	restaurant.appetizers = ['Fried Calamari', 'Fries'];
	restaurant['desserts'] = ['Tiramisu', 'Cannoli'];
	restaurant.seatingCapacity = 150;
	const seats = restaurant.seatingCapacity;

	_                                        indicates a property or value should not be modified directly by ohter code
	{}                                       objects use curly braces
	_name, _entrees, etc.                    are all keys
	:                                        seperate keys from values with a colon
	value                                    on right of colon
	,                                        each key-value pair is seperated by comma
	openRestaurant: () =>	                   key-function pair. adds the openRestaurant method to restaurant
	closeRestaurant() {}                     same as above. creates a new method. this is best practice. only added in ES6
	this._hasDineInSpecial                   allows the method to operate based off of data inside of the same object
																						same as accessing restaurant.hasDineInSpecial
																						needs the this. bc otherwise it would be out of scope
	set seatingCapacity(newCapacity)         a setter method that sets a new value for the _seatingCapacity key
	get seatingCapacity()                    a getter method that logs something then returns the value saved to _seatingCapacity.
	restaurant._entrees                      uses dot notation to access the values of the keys
	restaurant['_entrees']                   same as dot notation
	restaurant[food]                         same as above, but uses a variable
	.openRestaurant()                        calls the method
	restaurant.appetizers                    adds the property appetizers to the restaurant object
	restaurant['desserts']                   same as above, but uses bracket notation
	.seatingCapacity = 150                   calls the setter method and sets _seatingCapacity to 150
	const seats = restaurant.seatingCapacity calls the getter method

	setter and getter methods
		defined with set and get
		used to set and get values within an object


CLASSES
	js is an object oriented language

	Constructor
		js calls the constructor() method every time it creates a new instance of a class

		class Dog {
			constructor(name) {
				this.name = name;
				this.behavior = 0;
			}
		}

	Instance
		an object that contains the property names and methods of a class, but with unique property values

		class Dog {
			constructor(name) {
				this.name = name;
				this.behavior = 0;
			}
		}
		const halley = new Dog('Halley'); // Create new Dog instance
		console.log(halley.name); // Log the name value saved to halley
		// Output: 'Halley'

	Method
		same syntax as objects, but you don't include commas between methods

		class Dog {
			constructor(name) {
				this._name = name;
				this._behavior = 0;
			}
			get name() {
				return this._name;
			}
			get behavior() {
				return this._behavior;
			}
			incrementBehavior() {
				this._behavior++;
			}
		}

	Method Calls
		syntax for calling methods and getters on an instance is the same as calling them on an object.
		append the instance with a period, then the property or method name.
		for methods, you must also add opening and closing parenthesis

		let nikko = new Dog('Nikko'); // Create dog named Nikko
		nikko.incrementBehavior(); // Add 1 to nikko instance's behavior
		let bradford = new Dog('Bradford'); // Create dog name Bradford
		console.log(nikko.behavior); // Logs 1 to the console
		console.log(bradford.behavior); // Logs 0 to the console

	Inheritance
		still a thing. very similar to c++. child classes inherit everything (properties, methods, etc.) from parent class

		//parent class
		class Animal {
			constructor(name) {
				this._name = name;
				this._behavior = 0;
			}
			get name() {
				return this._name;
			}
			get behavior() {
				return this._behavior;
			}
			incrementBehavior() {
				this._behavior++;
			}
		}
		//child class
		class Cat extends Animal {
			constructor(name, usesLitter) {
				super(name);
				this._usesLitter = usesLitter;
			}
			get usesLitter() {
				return this._usesLitter;
			}
		}
		//second child class
		class Dog extends Animal {
			constructor(name) {
				super(name);
			}
		}

		extends				this keyword makes the methods of the animal class available inside the cat class
										"a new class named Cat extend the Animal class"
		constructor		called when you create a new Cat object, accepts two args: name and usesLitter
		super					calls the contructor of the parent class. in this case, super(name) passes the name argument of the Cat class to the contructor of the Animal class.then the Animal constructor runs, it sets this._name = name; for the new Cat instances
										MUST ALWAYS CALL THE super METHOD BEFORE YOU USE THE this KEYWORD -- if you don't js will throw a reference error
		_usesLitter   a unique property to the Cat class
		usesLitter()  a method specific to the Cat class

	Static Methods
		a static method is a method that isn't available in individual instances of the class, but can only be called directly from the class (SEE EXAMPLE BELOW)

		class Animal {
			constructor(name) {
				this._name = name;
				this._behavior = 0;
			}
			static generateName() {
				const names = ['Angel', 'Spike', 'Buffy', 'Willow', 'Tara'];
				const randomNumber = Math.floor(Math.random()*5);
				return names[randomNumber];
			}
		}
		//returns a name
		console.log(Animal.generateName());
		//TypeError
		const tyson = new Animal('Tyson');
		tyson.generateName();


BROWSER COMPATIBILITY AND TRANSPILATION
	caniuse.com
		a website that provides data on web browser compatibility for HTML, CSS, and JS features

	babel
		a js library that transpiles ES6 js to ES5
		changes ES6 code to work with ES5 only serves

		Process to transpile all ES6 code to ES5
			1. place all ES6 js files into a dir called 'src'
				i. from root dir, path to ES6 is './src/main.js'
			2. run 'npm init'
				i. this creates a package.json file in the root dir
				ii. not required to fill in fields for the project's metadata, but should
			3. install babel
				i. 'npm install babel-cli -D'
				ii. 'npm install babel-preset-env -D'
				iii. creates a new folder, node_modules, that has all necessary files
				iv. the -D flag instructs npm to add each package to a property called devDependencies in package.json
					a. this is so that other devs can run your proj without installing each package seperately. instead they simply run 'npm install'.
			4. in root dir, 'touch .babelrc'
			5. inside .babelrc, you need to define the preset for your source JS files. the preset specifies the version of your inital JS files
				i. to specify that we are transpiling code from an ES6+ source, add this in .babelrc:
					{
						"presets": ["env"]
					}
			6. inside of package.json, within the "scripts" property, add this below "tests":
				i. "build": "babel src -d lib"
			7. run 'npm run build'


MODULES
	def: reusable pieces of code that can be exported from one program and imported for use in another
	by seperating code with similar logic into files called modules, we can:
		find, fix, and debug code easier
		reuse and recycle defined logic in diff parts of out app
		keep info private and protected from other modules
		prevent pollution of the global namespace and potential naming collisions, by cautiosly selecting variables and behavior we load into a program

	module.exports
		pattern used to export modules
			1. define an object to represent the module
			2. add data or behavior to the module
			3. export the module

		let Menu = {};
		Menu.specialty = "Roasted Beet Burger with Mint Sauce";
		module.exports = Menu;

		module.exports = Menu;    exports the Menu object as a module. 'module' is a variable that represents the module, and 'exports' exposes the module as an object

	require()
		in order to make use of the exported module and the behavior within it, we import the module
		pattern used to import a module:
			1. import the module using require()
			2. use the module and its properties within a program

		// in new file, order.js
		const Menu = require('./menu.js');
		function placeOrder() {
			console.log('My order is: ' + Menu.specialty);
		}
		placeOrder();

		order.js			import module by creating a const variable called Menu and set it equal to value of require() func.
		require()			a js funct that enables a module to load by passing in the module's filepath as a parameter
		'./menu.js'   the arg we pass to require()
		placeOrder()  uses the Menu module in its function def. By calling Menu.specialty, we access the property specialty defined in the Menu module

	module.exports II
		let Menu = {};
		module.exports = {
			specialty: "Roasted Beet Burger with Mint Sauce",
			getSpecialty: function() {
				return this.specialty;
			}
		};

		module.exports          exposes the current module as an object
		specialty/getSpecialty	properties on the object

		// in order.js
		const Menu = require('./menu.js');
		console.log(Menu.getSpecialty());

		same as in other method

	export default
		let Menu = {};
		export default Menu;

		same thing as before, just better syntax

	import
		import Menu from './menu';

		'./menu'      when dealing with local files, it specifically refers to the name of the file without the extention of the file
		almost same thing as require. only difference is that 'import' isn't able to be used dynamically, meaning in a function
		other than that, basically same thing and with better syntax

	named exports
		allows us to export data through the use of variables

		let specialty = '';
		function isVegetarian() {};
		function isLowSodium() {};
		export { specialty, isVegetarian };

		each export is stored in its own variable
		'specialty' is a string object. 'isVegetarian' and 'isLowSodium' are objects in the form of functions. recall that every function is in fact a function object
		export { specialty, isVegetarian }; exports the objects by their variable names. isLowSOdium was not exported

	named imports
		to import objects stored in a variable, use import keyword and include variables in a set of {}

		import { specialty, isVegetarian } from './menu';
		console.log(specialty);

		specialty and isVegetarian are imported with that statement
		if didn't want one, can simply omit it from import statement
		we can now use these objects as in within our code
		for ex, we would use specialty instead of Menu.specialty

	export named exports
		allows you to export an object as soon as it's declared

		export let specialty = '';
		export function isVegetarian() {};
		function isLowSodium() {};

		export allows us to export objects upon declaration
		no longer needs the export statement at end of the file

	export as
		allows you to change the name of variables when we export or import them
		must be imported as the alias given to them

		let specialty = '';
		let isVegetarian = function() {};
		let isLowSodium = function() {};
		export { specialty as chefsSpecial, isVegetarian as isVeg, isLowSodium };

		the 'as' keyword allows us to give a variable name an alias as demonstrated in 'isVegetarian as isVeg'

		// imports in new file
		import { chefsSpecial, isVeg } from './menu';

		// or can do this
		import * as Carte from './menu';
		Carte.chefsSpecial;
		Carte.isVeg();
		Carte.isLowSodium();

		this allows us to import an entire module from menu.js as an alias Carte


REQUESTS I
	four most common types os HTTP requests
		GET, POST, PUT, DELETE

	GET
		retrieve info from some source, usually a website
	POST
		posting info to a source that will process the info and send it back

	JSON
		JavaScript Object Notation

	JavaScript uses an event loop to handle asynchronous function calls
		when program is run, function calls are made and added to stack
		functions that make requests that need to wait for servers to respond are sent to separate queue
		once stack is cleared, fucntions in queue are executed

	AJAX
		asynchronous js and XML
		enables requests to be made after the inital page load

	XHR
		XMLHttpRequest
		can be used to make many kinds of requests and supports other forms of data

	XHR GET REQUEST
		const xhr = new XMLHttpRequest();
		const url = 'https://api-to-call.com/endpoint';
		xhr.responseType = 'json';
		xhr.onreadystatechange = () => {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				return xhr.response;
			}
		};
		// .open creates a new request and the args passed in determine the type and URL of the request
		xhr.open('GET', url);
		xhr.send();

		// actual thing that uses an XHR GET request without query string
			const url = 'https://api.datamuse.com/words?';
			const queryParams = 'rel_rhy=';

			// Selecting page elements
			const inputField = document.querySelector('#input');
			const submit = document.querySelector('#submit');
			const responseField = document.querySelector('#responseField');

			// AJAX function
			const getSuggestions = () => {
				const wordQuery = inputField.value;
				const endpoint = url + queryParams + wordQuery;
				const xhr = new XMLHttpRequest;
				xhr.responseType = 'json';
				xhr.onreadystatechange = () => {
					if (xhr.readyState === XMLHttpRequest.DONE) {
						renderResponse(xhr.response);
					}
				};
				xhr.open('GET', endpoint);
				xhr.send();
			}

			// Clear previous results and display results to webpage
			const displaySuggestions = (event) => {
				event.preventDefault();
				while(responseField.firstChild){
					responseField.removeChild(responseField.firstChild);
				};
				getSuggestions();
			}

			submit.addEventListener('click', displaySuggestions);

		def: query sting - contains additional info to be sent with a request that allows us to retrieve more specific data
		? - a query string is separated from the URl using a ?
		= - after the ?, you can then create a parameter which is a key value pair joined by a =
		& - if you wanna add an additional parameter you will have to use the & character to separate your parameters
			'https://api.datamuse.com/words?key=value&anotherKey=anotherValue'

		// actual thing that uses an XHR GET request with query string
			// Information to reach API
			const url = 'https://api.datamuse.com/words?';
			const queryParams = 'rel_jjb=';
			const additionalParams = '&topics=';

			// Selecting page elements
			const inputField = document.querySelector('#input');
			const topicField = document.querySelector('#topic');
			const submit = document.querySelector('#submit');
			const responseField = document.querySelector('#responseField');

			// AJAX function
			const getSuggestions = () => {
				const wordQuery = inputField.value;
				const topicQuery = topicField.value;
				const endpoint = `${url}${queryParams}${wordQuery}${additionalParams}${topicQuery}`;

				const xhr = new XMLHttpRequest();
				xhr.responseType = 'json';

				xhr.onreadystatechange = () => {
					if (xhr.readyState === XMLHttpRequest.DONE) {
						renderResponse(xhr.response);
					}
				}

				xhr.open('GET', endpoint);
				xhr.send();
			}

			// Clear previous results and display results to webpage
			const displaySuggestions = (event) => {
				event.preventDefault();
				while(responseField.firstChild){
					responseField.removeChild(responseField.firstChild);
				}
				getSuggestions();
			}

			submit.addEventListener('click', displaySuggestions);

	XHR POST REQUEST
		// boilerplate POST request
			const xhr = new XMLHttpRequest;
			const url = 'https://api-to-call.com/endpoint';
			// JSON.stringify will convert a value to a JSON string
			//   by converting the value to a string, we can then send the data to a server
			const data = JSON.stringify({id: '200'});

			xhr.responseType = 'json';
			// contains the event handler that will be called when xhr's state changes
			xhr.onreadystatechange = () => {
				if(xhr.readyState === XMLHttpRequest.DONE){
					// will contain the data that we're getting back from POST
					return xhr.response;
				}
			};

			xhr.open('POST', url);
			xhr.send(data);

		// actual thing that uses a xhr POST request
			// Information to reach API
			const apiKey = <PUT KEY HERE>;
			const url = 'https://api.rebrandly.com/v1/links';

			// Some page elements
			const inputField = document.querySelector('#input');
			const shortenButton = document.querySelector('#shorten');
			const responseField = document.querySelector('#responseField');

			// AJAX functions
			const shortenUrl = () => {
				const urlToShorten = inputField.value;
				const data = JSON.stringify({destination: urlToShorten});
				const xhr = new XMLHttpRequest;
				xhr.responseType = 'json';
				xhr.onreadystatechange = () => {
					if (xhr.readyState === XMLHttpRequest.DONE) {
						renderResponse(xhr.response)
					}
				};
				xhr.open('POST', url);
				// needed to access the Rebrandly API
				xhr.setRequestHeader('Content-type', 'application/json');
				xhr.setRequestHeader('apikey', apiKey);
				xhr.send(data);
			}


			// Clear page and call AJAX functions
			const displayShortUrl = (event) => {
				event.preventDefault();
				while(responseField.firstChild){
					responseField.removeChild(responseField.firstChild);
				}
				shortenUrl();
			}

			shortenButton.addEventListener('click', displayShortUrl);


REQUESTS II
	promises
		introduced in ES6
		an object that handles asynchronous data
		three states
			pending
				when a promise is created or waiting for data
			fulfilled
				the asynchronous operation was handled successfully
			rejected
				the asynchronous operation was unsuccessful
		once promise is fulfilled or rejected, you can chain an additional method to the original promise

	fetch() GET requests
		fetch()
			creates a request object that contains relevant info that an API needs
			sends that request object to the API endpoint provided
			returns a promise that ultimately resolved to a response object, which contains the status of the promise with info the API sent back

		// boilerplate code
		fetch('https://api-to-call.com/endpoint').then(response => {
			if(response.ok){
				return response.json();
			}
			throw new Error('Request failed!');
		},
		networkError => {
			console.log(networkError.message);
		}).then(jsonResponse => {
			//code
		});

		// actual working code
			// Information to reach API
			const url = 'https://api.datamuse.com/words';
			const queryParams = '?sl=';

			// Selects page elements
			const inputField = document.querySelector('#input');
			const submit = document.querySelector('#submit');
			const responseField = document.querySelector('#responseField');

			// AJAX function
			const getSuggestions = () => {
				const wordQuery = inputField.value;
				const endpoint = `${url}${queryParams}${wordQuery}`;

				fetch(endpoint).then(response => {
					if (response.ok) {
						return response.json();
					}
					throw new Error('Request failed!');
				}, networkError => {
					console.log(networkError.message)
				}).then(jsonResponse => {
					renderResponse(jsonResponse);
				});
			}

			// Clears previous results and display results to webpage
			const displaySuggestions = (event) => {
				event.preventDefault();
				while(responseField.firstChild){
					responseField.removeChild(responseField.firstChild);
				}
				getSuggestions();
			};

			submit.addEventListener('click', displaySuggestions);

	fetch() POST requests
		// boilerplate code
		fetch('https://api-to-call.com/endpoint', {
			method: 'POST',
			body: JSON.stringify({id: '200'})
		}).then(response => {
			if(response.ok){
				// this is passed on to the next .then() callback function
				return response.json();
			}
			throw new Error('Request failed!');
		}, networkError => console.log(networkError.message)).then(jsonResponse => {
			// used to view the JSON that was returned from previos .then()
		});

		// actual fetch POST request
			// Information to reach API
			const apiKey = 'ENTER KEY HERE';
			const url = 'https://api.rebrandly.com/v1/links';

			// Some page elements
			const inputField = document.querySelector('#input');
			const shortenButton = document.querySelector('#shorten');
			const responseField = document.querySelector('#responseField');

			// AJAX functions
			const shortenUrl = () => {
				const urlToShorten = inputField.value;
				const data = JSON.stringify({destination: urlToShorten});
				fetch(url, {
					method: 'POST',
					headers: {
						'Content-type': 'application/json',
						'apikey': apiKey
					},
					body: data
				}).then(response => {
					if(response.ok){
						return response.json();
					}
					throw new Error('Request failed!');
				}, networkError => console.log(networkError.message)).then(jsonResponse => {
					renderResponse(jsonResponse)
				});
			}

			// Clear page and call AJAX functions
			const displayShortUrl = (event) => {
				event.preventDefault();
				while(responseField.firstChild){
					responseField.removeChild(responseField.firstChild)
				}
				shortenUrl();
			}

			shortenButton.addEventListener('click', displayShortUrl);

	async GET requests
		async
			ensures the function will return a promise
		await can only be used in an async function
			await allows a program to run while waiting for a promise to resolve

		// boilerplate
		const getData = async () => {
			try{
				const response = await fetch('https://api-to-call.com/endpoint');
				if(response.ok){
					const jsonResponse = await response.json();
					return jsonResponse;
				}
				throw new Error('Request failed!');
			}
			catch(error){
				console.log(error);
			}
		};

		// actual code
			// Information to reach API
			const url = 'https://api.datamuse.com/words?';
			const queryParams = 'rel_jja=';

			// Selecting page elements
			const inputField = document.querySelector('#input');
			const submit = document.querySelector('#submit');
			const responseField = document.querySelector('#responseField');

			// AJAX function
			const getSuggestions = async () => {
				const wordQuery = inputField.value;
				const endpoint = url + queryParams + wordQuery;
				try{
					const response = await fetch(endpoint);
					if(response.ok){
						const jsonResponse = await response.json();
						renderResponse(jsonResponse);
					}
				}
				catch(error){
					console.log(error);
				}
			};

			// Clear previous results and display results to webpage
			const displaySuggestions = (event) => {
				event.preventDefault();
				while(responseField.firstChild){
					responseField.removeChild(responseField.firstChild)
				}
					getSuggestions();
			}

			submit.addEventListener('click', displaySuggestions);

	async POST requests
		// boilerplate
		const getData = async () => {
			try{
				const response = await fetch('https://api-to-call.com/endpoint', {
					method: 'POST',
					body: JSON.stringify({id: 200})
				});
				if(response.ok){
					const jsonResponse = await response.json();
					return jsonResponse;
				}
				throw new Error('Request failed!');
			}
			catch(error){
				console.log(error);
			}
		};

		// actual code
			// information to reach API
			const apiKey = 'ENTER KEY HERE';
			const url = 'https://api.rebrandly.com/v1/links';

			// Some page elements
			const inputField = document.querySelector('#input');
			const shortenButton = document.querySelector('#shorten');
			const responseField = document.querySelector('#responseField');

			// AJAX functions
			const shortenUrl = async () => {
				const urlToShorten = inputField.value;
				const data = JSON.stringify({destination: urlToShorten});
				try{
					const response = await fetch(url, {
						method: 'POST',
						body: data,
						headers: {
							'Content-type': 'application/json',
							'apikey': apiKey
						}
					});
					if(response.ok){
						const jsonResponse = await response.json();
						renderResponse(jsonResponse);
					}
				}
				catch(error){
					console.log(error);
				}
			};

			// Clear page and call AJAX functions
			const displayShortUrl = (event) => {
				event.preventDefault();
				while(responseField.firstChild){
					responseField.removeChild(responseField.firstChild);
				}
				shortenUrl();
			}

			shortenButton.addEventListener('click', displayShortUrl);


OTHER SHIT I LEARNED
	innerHTML
		defines the HTML content
		document.getElementById('id1').innerHTML = 5 + 6;

	document.getElementById('id')
		allows you to access an HTML element

	document.write()
		can call document.write() in a js file to print stuff on screen of html file
		if used after all HTML doc is fully loaded will delete all existing HTML
		document.write('hello world\n');

	window.alert()
		creates an alert box to display data
		window.alert(5 + 6); //alerts 11 on screen

	console.log()
		prints to console

	== vs ===
		===
			checks for strict equality, meaning both type and value are the same
			5 === 5						// true
			5 === '5'					// false
			false === 0				// false
			'cat' === 'dog'		// false

		==
			checks for loose equality, meaning it checks for the same value after trying to make the types the same
			5 == 5						// true
			5 == '5'					// true
			false == 0				// true
			'cat' == 'dog'		// false


