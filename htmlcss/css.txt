CSS
	can write css code within the html file using
		<style>
		</style>

	better
		make a .css file with all the css code

		<link>
			links the css file with the html file

			requires href - should be set to path of css file, type - should be set to "text/css", rel - should be set to "stylesheet"

			<link
				href = "https://www.codeacademy.com/stylesheets/style.css"
				type = "text/css"
				rel = "stylesheet">

			href = "/style.css"
				if .css file is in same directory


BASIC STRUCTURE AND SYNTAX
	the css selectore essentially matches the html tag for that element but w/o the angled brackets

	if wanting to select <h1>
		h1 {
		}

	if wanting to select all
		* {
			font-family: Arial;
		}

	css declarations
		need two things within the selected html element
			property - the property you'd like to style

			value - the value of the property

			h1, h2, p {
				color: Green;
			}

	comments
		/* psknsdnkjsd */


COLORS
	foreground colors
		color: Red;

	background colors
		background-color: Blue;

	147 named colors
		google them if needed

	rgb colors
		color: rgb(123, 20, 233);

	rgba
		the 'a' signifies opacity, between 0 and 1, inclusive
		color: rgba(123, 20, 233, .5)

	hex colors
		color: #452F73

	hsl
		color: hsl(182, 20%, 50%)

	hsla
		color: hsla(182, 20%, 50%, .4)

	color declarations
		many older browsers dont support rgba, hsl, hsla
		so above rgba, hsl, hsla - add reduntent declaration in rgb or something of the sort so that it still has something to do
		takes the last declaration, but if can't handle last, takes the second to last, etc


FONTS
	font-family: "Times New Roman";

	serif
		fonts with little extra ass shit on the edges

	sans-serif
		w/o extra shit

	h1 {
		font-family: Garamond, Times, sarif;
	}
		uses Garamond first, then Times as a fallback, then if that doesn't work, then any sarif font

	google fonts
		add the fonts in head

		<link
			href = "https://fonts.googleapis.com/css?family=Raleway"
			type = "text/css"
			rel = "stylesheet">

		h1 {
			font-family: Raleway, Georgia, serif;
		}

	font size
		font-size: 18px;

		can use px, %, em
			px- pixels on screen

			em- change size of font relative to parent element's size of text

			%- relative to default size of web browser

	line height
		changes the height of the line

		preffered to use ems

		line-height: 1.5em;

	word spacing
		word-spacing: .3em;

		typical is about 0.25em

	letter spacing
		letter-spacing: .3em;

	font weight
		whether bold or normal text
		sets entire block into bold

		font-weight: bold;

		100 - thin
		200, 300, 400 - normal
		500, 600, 700, 800, 900 - bold

	font style
		italics or normal

		font-style: italic;

	text transformation
		all appear to be upper or lower cased

		text-transform: uppercase;

	text alignement
		align text on left, right, or center

		text-align: right;


CLASSES, IDS, DIVS
	id
		#boom {
			background-color: #56ABFF;
		}

		used to target specific headings, paragraphs, etc

	classes
		.science {
			background-color: #56ABFF;
		}

		p.science {
			line-height: 1.3em;
		}

		.first, .last {
			font-size: 20px;
		}

		.science selects all elements with the classs science
		p.science selects all p elements with the class science

	multiple classes
		.book {
			font-family: Georgia, serif;
		}

		.domestic {
			font-color: #0902CC;
		}

		.foreign {
			font-color: #B097DD;
		}

		<h1 class="book domestic"> The Way of the Deep </h1>

		<h1 class="book foreign"> A Night in the Sky </h1>

		if you want to use multiple classes on a certain element


NEW CSS COURSE
CSS SETUP AND SELECTORS
	inline styles
		css within html file, specifically wihtin an element
		<p style="color:red; font-size:20px;">Text</p>

	<style> </style>
		allows you to style html elements from within html file
		must be within <head> </head>
		<head>
			<style>
				p {
					color:red;
					font-size:20px;
				}
			</style>
		</head>

	.css file
		best location to write styling for elements
		must be linked into HTML file

	<link href="./css/style.css" type="text/css" rel="stylesheet" />
		must be placed within head of HTML file
		href is the address of the css file
		type is the type of file you're linking to
		rel is the relationship between the HTML and css files

	tag name
		p {
			font-family: Arial;
		}

	class name
		'class' is an attribute that can be added to html elements so that all elements of that class are stlyed the same
		<!-- file.html -->
		<p class="brand">Sole Shoe Company</p>

		/* style.css */
		.brand {
			/* stuff */
		}

	multiple classes
		allows an html element to be part of multiple classes
		<!-- file.html -->
		<p class="green bold">Text</p>

		/* style.css */
		.green {
			color: green;
		}
		.bold {
			font-weight: bold;
		}

	id name
		allows a html element to be styled uniquely regardless of what classes are applied to the element
		<!-- file.html -->
		<p id="large-title">Text</p>

		/* style.css */
		#large-title {
			/* stuff */
		}

	class vs id
		classes meant to be reused over many elements
		id meant to style only one element

	specificity
		!important > id > class > tag
		meaning it'll follow the styling for id first, then class, then tag

	chaining electors
		done in order to require an html element to have two or more css selectors at the same time
		p.yellow {
			background: yellow;
		}
		makes any (below) have a yellow background
		<p class="yellow">

	nested elements
		.main-list li {
			background: yellow;
		}
		makes any <li> element which is a descendant of a class of main-list yellow, such as:
		<ul class='main-list'>
			<li> ... </li>
		</ul>

	important
		!important is applied to specific attributes instead of full rules
		it overrides ANY style no matter how specific it is

		p {
			color: blue !important;
		}

	multiple selectors
		allows diff elements/class/ids to have same code
		SEPERATED BY COMMA

		h1, .menu {
			font-family: Georgia;
		}


VISUAL RULES
	font-family
		used to change font
		font must be installed on a user's computer
		default font is Times New Roman
		2-3 fonts max
		if font-family is more than one word, should be enclosed in quotes
		p {
			font-family: "Courier New";
		}

	font-size
		used to change font size
		p {
			font-size: 18px
		}

	font-weight
		font-weight: bold;
		how bold or thin text appears
		has value of bold and normal
		p {
			font-weight: bold;
		}

	text-align
		text-align: right;
		left, center, or right
		p {
			text-align: right;
		}

	color
		foreground color
			the color that an element appears in
			p {
				color: red;
			}

		background-color
			the color behind the element
			p {
				background-color: blue;
			}

	opacity
		the measure of the transparancy of an element
		0 to 1 inclusive
			0 is transparant
			1 is fully visible
		p {
			opacity: 0.5;
		}

	background-image
		makes the background of an element into an image
		p {
			background-image: url("https://www.example.com/image.jpg");
			background-image: url("images/image.jpg");
		}


THE BOX MODEL
	box model
		margin
			border
				padding
					content - height - width

	height and width
		px
			pixels allow you to set the exact size of an element's box

	border
		a line that surrounds an element
		width
			the thinkness of the border
			can be set in pixels or with 'thin', 'medium', or 'thick'
		style
			the design of the border
		color
			color of the border
		default is "medium none color"
			"color" is the current color of the element
		p{
			border: 3px solid coral;
		}

	border-radius
		changes the shape of the outlining radius
		can create a perfect circle by either setting radius equal to height of the box, or to 100%
		div.container {
			border-radius: 100%
			border-radius: 5px;
		}

	padding
		the space between the contents of a box and the borders of a box
		often used to expand the background color and make content look lessed cramped
		p.content-header {
			padding: 0px;
			padding: 6px 11px 4px 9px;
			padding-top: 6px;
			padding-right: 11px;
			padding-bottom: 4px;
			padding-left: 9px;
			/* sets top and bottome to 5 and left and right to 10 */
			padding: 5px 10px;
		}

	margin
		refers to the space directly outside of the box
		p.content-header {
			margin: 0px;
			margin: 6px 11px 4px 9px;
			margin-top: 6px;
			margin-right: 11px;
			margin-bottom: 4px;
			margin-left: 9px;
			/* sets top and bottom to 5 and left and right to 10 */
			margin: 5px 10px;
		}

	auto
		allows to automatically center margins
		must have declared a width
		div.headline {
			width: 400px;
			margin: 0 auto;
		}

	margin collapse
		horizontal margins, like padding, are added together between neighboring elements
		verticle margins aren't. the larger of the top/bottom margins takes presidece and only that one is used

	min and max height/width
		min-width/height
			the property ensures a minimum width/height of an element's box
		max-width/height
			the property ensures a maximum width/height of an element's box
		p {
			min-width: 300px;
			max-width: 600px;
			min-height: 150px;
			max-height: 300px;
		}

	overflow
		controls what happens to content that spills outside its box
		can be set to:
			hidden
				any content that overflows will be hidden from view
			scroll
				a scrollbar will be added to the element's box so that the rest of the content can be viewed by scrolling
			visible
				the overflow content will be displayed outside of the containing element
		p {
			overflow: scroll;
		}

	resetting defaults
		all major web browsers have a default stylesheet they use in the absense of an external stylesheet known as user agen stylesheets
		often have default css rules that set default values for padding and margin
		can reset all defaults by:
		* {
			margin: 0;
			padding: 0;
		}

	visibility
		elements can be hidden from view
		can be set to hidden(hides an element) or visible(displays an element)
		.future {
			visibility: hidden;
		}

	visibility: hidden vs display: none
		display: none will be completely removed from the web page
		visibility: hidden will not be visible on the web page, but the space reserved for it will


CHANGING THE BOX MODEL
	box-sizing
		controls the type of box model the browser should use when interpreting a web page
		default is 'content-box'
			affected by border thickness and padding
			* {
				box-sizing: content-box;
			}
			h1 {
				border: 1px solid black;
				height: 200px;
				width: 300px;
				padding 10px;
			}
			/* total size of box is 322x222 */
		border-box
			height and width will remain fixed
			border thickness and padding will be included inside of the box, which means the overall dimensions of the box do not change
			* {
				box-sizing: border-box;
			}
			h1 {
				border: 1px solid black;
				height: 200px;
				width: 300px;
				padding 10px;
			}
			/* total size of box is 300x200 */


CSS DISPLAY AND POSITIONING
	position
		default position is on left side of browser
		can be:
			static
				the default value
			relative
				allows you to position an element relative to its default static position on the web page using top, bottom, left, right
				top
					moves the element down
				bottom
					moves the element up
				left
					moves the element right
				right
					moves the element left
				.box-bottom {
					position: relative;
					top: 20px;
					left: 50px;
				}
			absolute
				all other elements will ignore the element and act like it's not present on the page
				will be positioned relative to its closest positioned parent element
				doesn't move with screen if scrolled
				.box-bottom {
					position: absolute;
					top: 20px;
					left: 50px;
				}
			fixed
				fix an element to a specific position on the page, regardless of user scrolling

	z-index
		controls what elements are in front or behind others "depth"
		accepts integer values
		doesn't work with static elements

	display
		inline
			only take up the amount of space necessary to display their content and not requiring a new line after each element
			cannot be altered in size with height or width properties
			h1 {
				display: inline;
			}
		block
			fill the entire width of the page, but their width property can also be set
			height is only the necessary unless otherwise changed
			strong {
				display: block;
			}
		inline-block
			can appear next to each other and we can specify their dimensions using the width and height properties
			.rectangle {
				display: inline-block;
				width: 200px;
				height: 300px;
			}

	float
		used to move elements as far left or right as possible
		.box-bottom {
			float: left;
			float: right;
		}

	clear
		specifies how elements should behave when they bump into each other on the page
		can be:
			left
				the left side of the element will not touch any other element eithin the same containing element
			right
				the right side of the element will not touch any other element within the same containing element
			both
				neither side of the element will touch any other element within the same containing element
			none
				the element can touch either side


COLORS
	color
		adjusts the foreground color

	background-color
		adjusts the background color

	rgb
		rgb(23, 45, 23)
		each can have a number between 0 and 255 inclusive

	hsl
		hsl(120, 60%, 70%)
		hue
			an angle on the color wheel
			red 0/360
			green 120
			blue 240
		saturation
			intensity/purity of the color
			0% is center of circle, meaning white/gray
			100% is pure color
		lightness
			how light/dark color is
			default is about 50%

	hsla
		opacity is the amount of transparancy
		alpha is a decimal number from 0 to 1 that signifies the opacity
			0 is transparent
			1 is opaque
		hsla(34, 100%, 50%, .1)

	rgba
		same thing as hsla, but using rgb instead of hsl
		rgba(234, 45, 67, .89)

	transparant
		a named color to make something transparent


TYPEOGRAPHY
	font-family
		allows you to change the typeface of text on your web page
		h1 {
			font-family: Garamond;
			font-family: "Courier New";
		}

	font-weight
		allows you to make something bold
		can be set to normal or bold
		can also be set to 100 to 900, incrementing by 100
			400 is default of most text
			700 is usually bold
			300 is typically light
		however, not all fonts can be assigned a numeric font-weight
		span {
			font-weight: normal;
			font-weight: bold;
		}

	font-style
		allows you to make something italicized
		can be set to normal ot italic
		span {
			font-style: italic;
		}

	word-spacing
		allows you to change the spacing between words
		typical is about .25ems
		h1 {
			word-spacing: .3em;
		}

	letter-spacing
		allows you to change the spacing between letters
		h1 {
			letter-spacing: 0.3em;
		}

	text-transform
		allows you to make all uppercase or all lowercase
		h1 {
			text-transform: uppercase;
		}

	text-align
		allows you to move text
		can be set to:
			left
				aligns text to the left hand side of the browser
			right
				aligns text to the right hand side of the browser
			center
				centers text

	line-height
		allows you to change the line height
		can be:
			a unitless number, like 1.2
				an absolute number that will compute the line height as a ratio of the font size
			a number specified by unit, like 12px
				can be px, %, em, rem
		p {
			line-height: 1.4;
		}

	serif fonts
		have extra details on the ends of each letter
		ie times new roman

	sans-serif
		don't have the extra details on the ends of each letter
		ie arial

	fallback fonts
		allos you to specify which fonts to use in case the main font isn't on the host computer
		h1 {
			font-familt: "Garamond", "Times", serif;
		}
		Garamond is first choice
		Times is second
		serif is last
			means that computer will use any serif font pre-installed

	linking fonts
		google has an enormous variety of free fonts you can use at fonts.google.com
		must link the font to the document
		must be linked in the <head> section of the HTML doc
		<head>
			<link href="https://fonts.googleapis.com/css?family=Space+Mono:400,700" rel="stylesheet">
		</head>

	@font-face
		allows you to import fonts directly into stylesheets
		can be done by:
			1. enter font's link into browser
			2. copy over the rules labeled /* latin */ to the top of style.css

		can also use local fonts
			@font-face {
				font-family: "Roboto";
				src: url(fonts/Roboto.woff2) format('woff2'),
								url(fonts/Roboto.woff) format('woff'),
								url(fonts/Roboto.tff) format('truetype');
			}


GRID
	creating a grid
		need both a grid container and grid items
		grid container is the parent element that contains grid items as children and applies overarching styling and positioning to them
		to turn an html element into a grid container, must set element's diplay property to grid(block-level grid) or inline-grid(inline grid)

	creating columns
		can define columns using 'grid-template-columns'
		can use px or %
		.grid {
			display: grid;
			width: 1000px;
			grid-template-columns: 20% 300px 50%;
		}

	creating rows
		can define rows using 'grid-template-rows'
		can use px or %
		.grid {
			display: grid;
			width: 1000px;
			height: 1000px;
			grid-template-columns: 20% 300px 50%;
			grid-template-rows: 10% 20% 700px;
		}

	grid template
		can replace the previous two
		size of rows / size of columns
		.grid {
			display: grid;
			width: 1000px;
			height: 1000px;
			grid-template: 10% 20% 700px / 20% 300px 50%
		}

	fr
		allows you to define columns and rows as a fraction of grid's length and width
		can be used with other units as well
		when used with other units, fr represents a fraction of the available space
		in the ex below, the available space is 800px
		.grid {
			display: grid;
			width: 1000px;
			height: 1000px;
			grid-template: 2fr 1fr 1fr / 1fr 200px 1fr;
		}

	repeat
		will duplicate the specifications for rows or columns a given number of times
		grid-template-rows: repeat(2, 1fr 2fr);

	minmax
		allows you to specify a minimum and maximum size for rows/columns
		grid-template-columns: 100px minmax(100px, 500px) 100px;
			1st and 3rd columns are always 100px, 2nd column will vary in size

	grid gap
		not added in beginning or end
		grid-row-gap if row specific
			grid-row-gap: 20px;
		grid-column-gap is column specific
			grid-column-gap: 10px;
		grid-gap can use both
			grid-gap: 20px 10px;
				row column
		fr need to take into account gaps between rows/columns

	multiple row items
		allows for an element to take up more than 1 row
		grid lines start at 1 and end at n+1
			meaning if a grid has 5 rows, the row lines range from 1 to 6
		start is inclusive
		end is exclusive
		can be combined with start / end
		.item {
			grid-row-start: 1;
			grid-row-end: 3;
			grid-row: 1 / 3;
		}

	multiple column items
		same as above, but using:
			grid-column-start
			grid-column-end
			grid-column

	span
		used to say how long an item should span
		.item {
			grid-column: 4 / 6;
		}
		.item {
				grid-column: 4 / span 2;
		}
		.item {
			grid-column: span 2 / 6;
		}

	grid area
		a refactoring of grid-column and grid-row into one
		grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;
		.item {
			grid-area: 2 / 3 / 4 / span 5;
		}


ADVANCED CSS GRID
	grid-template-areas
		allows you to name sections of your web page to use as values
	use grid-template-areas as a pseudo grid with keys that you can use in other rule sets as the value to grid-area
		basically, 'head' takes up the entire first row, and since the header element's rule set sets grid-area to 'head', it'll know to use header for the first row of the grid
		.container {
			display: grid;
			max-width: 900px;
			position: relative;
			margin: auto;
			grid-template-areas: "head head"
													"nav nav"
													"info services"
													"footer footer";
			grid-template-rows: 300px 120px 800px 120px;
			grid-template-columns: 1fr 3fr;
		}
		header {
			grid-area: head;
		}
		nav {
			grid-area: nav;
		}
		.info {
			grid-area: info;
		}
			.services {
			grid-area: services;
		}
		footer {
			grid-area: footer;
		}

	overlapping elements
		easily done using grid-area
		in ex below, info covers all eight rows and first three columns
		services covers all three rows and last three columns
		img is in rows 2-4 and columns 3-4, and is over info and services bc of z-index
		.container {
			display: grid;
			grid-template: repeat(8, 200px) / repeat(6, 100px);
		}
		.info {
			grid-area: 1 / 1 / 9 / 4;
		}
		.services {
			grid-area: 1 / 4 / 9 / 7;
		}
		img {
			grid-area: 2 / 3 / 5 / 5;
			z-index: 5;
		}

	justify-items
		positions grid items horizontally
		start
			aligns items to the left side of the grid
		end
			aligns items to the right side of the grid
		center
			aligns items to the center of the grid
		stretch
			stretched all items to fill the grid area

	justify-content
		positions the entire grid horizontally
		start
			aligns grid to the left side of the grid container
		end
			aligns grid to the right side of the container
		center
			centers the grid horizontally in the grid container
		stretch
			stretches the grid items to increase the size of the grid to expand horizontally across the container
		space-around
			includes an equal amount of space on each side of a grid element, resulting in doublt the amount of space between elements as there is before the first and after the last
		space-between
			includes an equal amount of space between grid items and no space at either end
		space-evenly
			places an even amount of space between grid items and at either end

	align-items
		positions grid items vertically
		start
			aligns grid items to the top side of the grid area
		end
			aligns grid items to the bottom side of the grid area
		center
			aligns grid items to the center of the grid area
		stretch
			stretches all items to fill the grid area

	align-content
		positions the rows vertically
		start
			aligns the grid to the top of the grid container
		end
			aligns the grid to the bottom of the grid container
		center
			aligns the grid vertically in the grid container
		stretch
			stretched the grid items to increase the size of the grid to expand vertically across the container
		space-around
			includes an equal amount of space on each side of a grid elemnt, resulting in double the amount of space between elements than before the first item and after the last
		space-between
			includes an equal amount of space between grid items and no space at either end
		space-evenly
			spaces an even amount of space between grid items and at either end

	justify-self and align-self
		specifies how an individual item should be positioned
		overrifes -items
		same properties as -items

	grid-auto-rows and grid-auto-columns
		grid-auto-rows specifies the height of implicitly added grid rows
		grid-auto-columns specifes the width of implicitly added grid columns
		accept same values as grid-template-rows and grid-template-columns
			px, %, fr, repeat()

	grid-auto-flow
		specifies whether new elements should be added to rows or columns
		row
			specifeis the new elements should fill rows from left to right and create new rows when there are too many elements
		column
			specifies the new elements should fill columns from top to bottom and create new columns when there are too many elements
		dense
			invvokes an alg that tries to fill holes earlier in the grid layout if smaller elements are added
		row and column can be paired with dense
			auto-flow: row dense;


